# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

include:
  - local: common-scripts.yml

stages:
  - build-container          # List of stages for jobs, and their order of execution
  - build
  - test

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - containers/

build-ubuntu20.4:
  stage: build-container
  cache:
    key: "gcc-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  tags:
    - shell
  script:
    - mkdir -p containers
    - if [ ! -e "containers/20.4-gcc-9.sif" ] ; then apptainer build containers/20.4-gcc-9.sif apptainer_recipe/20.4-gcc-9.def ; fi


build-ubuntu20.4-intel-2023.2.0:
  stage: build-container
  cache:
    key: "intel-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  tags:
    - shell
  script:
    - mkdir -p containers 
    - if [ ! -e "containers/20.4-intel-2023.2.0.sif" ] ; then apptainer build containers/20.4-intel-2023.2.0.sif apptainer_recipe/20.4-intel-2023.2.0.def ; fi

build-ubuntu20.4-cuda-11-8-gcc-9:
  stage: build-container
  cache:
    key: "gcc-cuda-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  tags:
    - shell
  script:
    - mkdir -p containers
    - if [ ! -e "containers/20.4-cuda-11-8-gcc-9.sif" ] ; then apptainer build containers/20.4-cuda-11-8-gcc-9.sif apptainer_recipe/20.4-cuda-11.8-gcc-9.def ; fi


build-ubuntu20.4-cuda-11-8-intel-2023.2.0:
  stage: build-container
  cache:
    key: "intel-cuda-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  tags:
    - shell
  script:
    - mkdir -p containers
    - if [ ! -e "containers/20.4-cuda-11-8-intel-2023.2.0.sif" ] ; then apptainer build containers/20.4-cuda-11-8-intel-2023.2.0.sif apptainer_recipe/20.4-cuda-11.8-intel-2023.2.0.def ; fi


ubuntu-20.4-gcc-9-openblas:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "gcc-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4
  variables:
    IMAGE_NAME: ""
    CONTAINER_NAME: "containers/20.4-gcc-9.sif"
    APPTAINER_EXEC_ARGS: "" 
  tags:
    - cpu
  script:
    - !reference [.cpu_prep, script]
    - export CC=gcc CXX=g++
    - meson setup _build --buildtype=debug -Dlapack=openblas -Dgpu=false
    - !reference [.meson_compile, script]
    - meson test
  artifacts:
    when: on_failure
    paths:
      - _build/meson-logs/*,txt

ubuntu-20.4-intel-2023.2.0-mkl:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "intel-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-intel-2023.2.0
  variables:
    IMAGE_NAME: ""
    CONTAINER_NAME: "containers/20.4-intel-2023.2.0.sif"
    APPTAINER_EXEC_ARGS: "" 
  tags:
    - cpu
  artifacts:
    when:  on_failure
    paths:
      - _build/meson-logs/*txt
  script:
    - !reference [.cpu_prep, script]
    - export CC=icc CXX=icpc
    - meson setup _build --buildtype=debug -Dlapack=mkl -Dgpu=false
    - !reference [.meson_compile, script]
    - meson test 
    - cat meson-logs/testlog.txt
  

ubuntu-20.4-intel-2023.2.0-openblas:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "intel-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-intel-2023.2.0
  variables:
    CONTAINER_NAME: "containers/20.4-intel-2023.2.0.sif"
    APPTAINER_EXEC_ARGS: ""
  tags:
    - cpu
  artifacts:
    when:  on_failure
    paths:
      - _build/meson-logs/*.txt
  script:
    - !reference [.cpu_prep, script]
    - export CC=icc CXX=icpc
    - meson setup _build --buildtype=debug -Dlapack=openblas -Dgpu=false
    - !reference [.meson_compile, script]
    - meson test 
  

ubuntu-20.4-gcc-9-mkl:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "intel-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-intel-2023.2.0
  variables:
    CONTAINER_NAME: "containers/20.4-intel-2023.2.0.sif"
    APPTAINER_EXEC_ARGS: "" 
  tags:
    - cpu
  script:
    - !reference [.cpu_prep, script]
    - export CC=gcc CXX=g++
    - meson setup _build --buildtype=debug -Dlapack=mkl -Dgpu=false
    - !reference [.meson_compile, script]
    - meson test
    - cat meson-logs/testlog.txt
  artifacts:
    when: on_failure
    paths:
      - meson-logs/testlog.txt  

ubuntu-20.4-cu-11.8-gcc-9-openblas:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "gcc-cuda-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-cuda-11-8-gcc-9
  variables:
    CONTAINER_NAME: "containers/20.4-cuda-11-8-gcc-9.sif"
    APPTAINER_EXEC_ARGS: "--nv" 
  tags:
    - cpu
    - gpu 
  script:
    - !reference [.cpu_prep, script]
    - !reference [.gpu_prep, script]
    - export CC=gcc CXX=g++
    - meson setup _build --buildtype=debug -Dlapack=openblas
    - !reference [.meson_compile, script]
    - meson test
  artifacts:
    when: on_failure
    paths:
      - meson-logs/testlog.txt 

ubuntu-20.4-cu-11.8-intel-mkl:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "intel-cuda-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-cuda-11-8-intel-2023.2.0
  variables:
    CONTAINER_NAME: "containers/20.4-cuda-11-8-intel-2023.2.0.sif"
    APPTAINER_EXEC_ARGS: "--nv"
  tags:
    - cpu
  script:
    - !reference [.cpu_prep, script]
    - !reference [.gpu_prep, script]
    - export CC=icc CXX=icpc
    - meson setup _build --buildtype=debug -Dlapack=mkl
    - !reference [.meson_compile, script]
    - meson test
  artifacts:
    when: on_failure
    paths:
      - _build/meson-logs/*txt

ubuntu-20.4-cu-11.8-gcc-9-openblas-cmake:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "gcc-cuda-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-cuda-11-8-gcc-9
  variables:
    CONTAINER_NAME: "containers/20.4-cuda-11-8-gcc-9.sif"
    APPTAINER_EXEC_ARGS: "--nv" 
  tags:
    - cpu
    - gpu 
  script:
    - !reference [.cpu_prep, script]
    - !reference [.gpu_prep, script]
    - export CC=gcc CXX=g++
    - cmake -B _build -DLAPACK_VENDOR=auto -DGPU=ON
    - !reference [.cmake_compile, script]
    - ctest

ubuntu-20.4-cu-11.8-intel-mkl-cmake:       # This job runs in the build stage, which runs first.
  stage: build
  cache:
    key: "intel-cuda-$CI_COMMIT_REF_SLUG"
    paths:
      - containers/
  dependencies:
    - build-ubuntu20.4-cuda-11-8-intel-2023.2.0
  variables:
    CONTAINER_NAME: "containers/20.4-cuda-11-8-intel-2023.2.0.sif"
    APPTAINER_EXEC_ARGS: "--nv"
  tags:
    - cpu
  script:
    - !reference [.cpu_prep, script]
    - !reference [.gpu_prep, script]
    - export CC=icc CXX=icpc
    - cmake -B _build -DLAPACK_VENDOR=auto -DGPU=ON
    - !reference [.cmake_compile, script]
    - ctest